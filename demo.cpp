/*
 * Copyright (c) 2016 - 2017 cooky451
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#include "keccak/keccak.hpp"

#include <cctype>
#include <cstddef>
#include <cstdint>
#include <cstring>

#include <array>
#include <chrono>
#include <iostream>
#include <map>
#include <random>
#include <string>
#include <type_traits>
#include <vector>

namespace {

static_assert(std::is_same_v<
	std::underlying_type_t<std::byte>,
	std::uint8_t>, "std::byte is not 8 bit wide.");

using seconds_f32 = std::chrono::duration<float, std::ratio<1, 1>>;
using seconds_f64 = std::chrono::duration<double, std::ratio<1, 1>>;
using milliseconds_f32 = std::chrono::duration<float, std::milli>;
using milliseconds_f64 = std::chrono::duration<double, std::milli>;

using keccak::memory_view;
using keccak::cmemory_view;
using keccak::data_as_bytes;

constexpr std::byte hexCharToByte(char c)
{
	switch (c)
	{
		// default: is at the bottom
	case '0':
		return std::byte{ 0 };
	case '1':
		return std::byte{ 1 };
	case '2':
		return std::byte{ 2 };
	case '3':
		return std::byte{ 3 };
	case '4':
		return std::byte{ 4 };
	case '5':
		return std::byte{ 5 };
	case '6':
		return std::byte{ 6 };
	case '7':
		return std::byte{ 7 };
	case '8':
		return std::byte{ 8 };
	case '9':
		return std::byte{ 9 };
	case 'A':
	case 'a':
		return std::byte{ 10 };
	case 'B':
	case 'b':
		return std::byte{ 11 };
	case 'C':
	case 'c':
		return std::byte{ 12 };
	case 'D':
	case 'd':
		return std::byte{ 13 };
	case 'E':
	case 'e':
		return std::byte{ 14 };
	case 'F':
	case 'f':
		return std::byte{ 15 };

		/*
		* Due to a VS 2017 bug, if the default is at the top
		* of the switch, this code path is *always* taken
		* when being executed at compile time.
		*/
	default:
		throw std::invalid_argument(
			"Character has no assigned hexadecimal value.");
	}
}

constexpr void hexStringToBytes(memory_view buffer, std::string_view hexstr)
{
	if (std::size(hexstr) % 2 != 0)
	{
		throw std::invalid_argument("Hex string length is not even.");
	}

	if (std::size(buffer) < std::size(hexstr) / 2)
	{
		throw std::invalid_argument("Buffer is too small.");
	}

	for (std::size_t i{}; i < hexstr.size() / 2; ++i)
	{
		auto lhs{ hexCharToByte(hexstr[i * 2]) };
		auto rhs{ hexCharToByte(hexstr[i * 2 + 1]) };

		buffer[i] = (lhs << 4) | rhs;
	}
}

auto hexStringToVector(std::string_view hexstr)
{
	std::vector<std::byte> vec(hexstr.size() / 2);
	hexStringToBytes(vec, hexstr);
	return vec;
}

std::string bytesToHexString(cmemory_view bytes)
{
	std::string s(std::size(bytes) * 2, char{});

	for (std::size_t i{}; i < std::size(bytes); ++i)
	{
		static constexpr auto HEX_ASCII{ "0123456789abcdef" };
		static constexpr std::byte MASK{ 0xF };

		const auto lhs{ static_cast<std::uint8_t>(bytes[i] >> 4) };
		const auto rhs{ static_cast<std::uint8_t>(bytes[i] & MASK) };

		s[i * 2 + 0] = HEX_ASCII[lhs];
		s[i * 2 + 1] = HEX_ASCII[rhs];
	}

	return s;
}

std::ostream& operator << (std::ostream& lhs, cmemory_view rhs)
{
	return lhs << bytesToHexString(rhs);
}

class HashVerificationError : public std::logic_error
{
public:
	HashVerificationError(
		const std::string& name,
		const std::vector<std::byte>& test,
		const std::vector<std::byte>& expected,
		const std::vector<std::byte>& calculated)
		: std::logic_error("Test for " + name +
			"(" + bytesToHexString(test) + ") failed. \nExpected\t[" +
			bytesToHexString(expected) + "]\nbut calculated\t[" +
			bytesToHexString(calculated) + "]\ninstead.")
	{}
};

template <typename Hasher>
void testHash(
	std::string hashName,
	const std::vector<std::vector<std::byte>>& tests,
	const std::vector<std::vector<std::byte>>& results)
{
	for (std::size_t i{}; i < tests.size(); ++i)
	{
		Hasher hasher;

		if (tests[i].size() == hasher.byte_rate() ||
			tests[i].size() + 1 == hasher.byte_rate())
		{
			hasher.update(tests[i]);
		}
		else if (tests[i].size() > 0)
		{
			hasher.update({ tests[i].data(), 1 });

			if (tests[i].size() > 100)
			{
				hasher.update({ tests[i].data() + 1, 77 });
				hasher.update({ tests[i].data() + 78, tests[i].size() - 78 });
			}
			else
			{
				hasher.update({ tests[i].data() + 1, tests[i].size() - 1 });
			}
		}

		std::vector<std::byte> hash(results[i].size());
		hasher.finish(hash);

		if (hash != results[i])
		{
			throw HashVerificationError(hashName, tests[i], results[i], hash);
		}
	}
}

void testAllHashing()
{
	/*
	 * Test vectors taken from the "Keccak Code Package"
	 */

	const std::vector<std::vector<std::byte>> tests
	{
		hexStringToVector(""),
		hexStringToVector("CC"),
		hexStringToVector( // (1600 - 1024 - 8)
			"13BD2811F6ED2B6F04FF3895ACEED7BEF8DCD45EB121791B"
			"C194A0F806206BFFC3B9281C2B308B1A729CE008119DD306"
			"6E9378ACDCC50A98A82E20738800B6CDDBE5FE9694AD6D"),
		hexStringToVector( // (1600 - 1024)
			"1EED9CBA179A009EC2EC5508773DD305477CA117E6D569E6"
			"6B5F64C6BC64801CE25A8424CE4A26D575B8A6FB10EAD3FD"
			"1992EDDDEEC2EBE7150DC98F63ADC3237EF57B91397AA8A7"),
		hexStringToVector( // (1600 - 512 - 8)
			"B771D5CEF5D1A41A93D15643D7181D2A2EF0A8E84D91812F"
			"20ED21F147BEF732BF3A60EF4067C3734B85BC8CD471780F"
			"10DC9E8291B58339A677B960218F71E793F2797AEA349406"
			"512829065D37BB55EA796FA4F56FD8896B49B2CD19B43215"
			"AD967C712B24E5032D065232E02C127409D2ED4146B9D75D"
			"763D52DB98D949D3B0FED6A8052FBB"),
		hexStringToVector( // (1600 - 512)
			"B32D95B0B9AAD2A8816DE6D06D1F86008505BD8C14124F6E"
			"9A163B5A2ADE55F835D0EC3880EF50700D3B25E42CC0AF05"
			"0CCD1BE5E555B23087E04D7BF9813622780C7313A1954F87"
			"40B6EE2D3F71F768DD417F520482BD3A08D4F222B4EE9DBD"
			"015447B33507DD50F3AB4247C5DE9A8ABD62A8DECEA01E3B"
			"87C8B927F5B08BEB37674C6F8E380C04"),
		hexStringToVector( // (1600 - 256 - 8)
			"0D8D09AED19F1013969CE5E7EB92F83A209AE76BE31C7548"
			"44EA9116CEB39A22EBB6003017BBCF26555FA6624185187D"
			"B8F0CB3564B8B1C06BF685D47F3286EDA20B83358F599D20"
			"44BBF0583FAB8D78F854FE0A596183230C5EF8E54426750E"
			"AF2CC4E29D3BDD037E734D863C2BD9789B4C243096138F76"
			"72C232314EFFDFC6513427E2DA76916B5248933BE312EB5D"
			"DE4CF70804FB258AC5FB82D58D08177AC6F4756017FFF5"),
		hexStringToVector( // (1600 - 256)
			"C3236B73DEB7662BF3F3DAA58F137B358BA610560EF74557"
			"85A9BEFDB035A066E90704F929BD9689CEF0CE3BDA5ACF44"
			"80BCEB8D09D10B098AD8500D9B6071DFC3A14AF6C77511D8"
			"1E3AA8844986C3BEA6F469F9E02194C92868CD5F51646256"
			"798FF0424954C1434BDFED9FACB390B07D342E992936E0F8"
			"8BFD0E884A0DDB679D0547CCDEC6384285A45429D115AC7D"
			"235A717242021D1DC35641F5F0A48E8445DBA58E6CB2C8EA"),
	};

	const std::vector<std::vector<std::byte>> sha3_224Results
	{
		hexStringToVector(
			"6B4E03423667DBB73B6E15454F0EB1AB"
			"D4597F9A1B078E3F5B5A6BC7"),
		hexStringToVector(
			"DF70ADC49B2E76EEE3A6931B93FA4184"
			"1C3AF2CDF5B32A18B5478C39"),
		hexStringToVector(
			"FA263B093EA3F96B52DB6251EA25A525"
			"4ADA5B54D476CB0794D38889"),
		hexStringToVector(
			"D803E320A9865EBF3555E8A3E3134768"
			"A2EE1B3E59FA15F35C2EC550"),
		hexStringToVector(
			"418C83EB01881B4F38544665201DD05C"
			"939CA047D31834F637342342"),
		hexStringToVector(
			"64D78817714FE05272D3805E6E19056B"
			"1649036CDCD5094FD1CC890A"),
		hexStringToVector(
			"EE5D508A4E75900193E99A04B8D838A1"
			"8DEDFCC431E7AF3182A47DD6"),
		hexStringToVector(
			"5942BA8B58A355F2AEF07E29F8F99713"
			"01E877FA32D7025DF552B1EB"),
	};

	const std::vector<std::vector<std::byte>> sha3_256Results
	{
		hexStringToVector(
			"A7FFC6F8BF1ED76651C14756A061D662"
			"F580FF4DE43B49FA82D80A4B80F8434A"),
		hexStringToVector(
			"677035391CD3701293D385F037BA3279"
			"6252BB7CE180B00B582DD9B20AAAD7F0"),
		hexStringToVector(
			"F7B0E15A63232A2B800B23B311D35761"
			"7DDFD1293E1FFE3F772692ADE3427152"),
		hexStringToVector(
			"B3D05AF7E8C406A7C2709223791D3F5F"
			"4B3129329993220053A36293AC2B0E06"),
		hexStringToVector(
			"A19EEE92BB2097B64E823D597798AA18"
			"BE9B7C736B8059ABFD6779AC35AC81B5"),
		hexStringToVector(
			"DF673F4105379FF6B755EEAB20CEB0DC"
			"77B5286364FE16C59CC8A907AFF07732"),
		hexStringToVector(
			"508B2AF376BA6467CF982C767C848D2B"
			"DA8D068A53416F074A0C98C473D02F6B"),
		hexStringToVector(
			"55E228BCBDA7061642D004373D4E6407"
			"B72A37381D1BEFFCBFBF9F5F6EA093EA"),
	};

	const std::vector<std::vector<std::byte>> sha3_384Results
	{
		hexStringToVector(
			"0C63A75B845E4F7D01107D852E4C2485"
			"C51A50AAAA94FC61995E71BBEE983A2A"
			"C3713831264ADB47FB6BD1E058D5F004"),
		hexStringToVector(
			"5EE7F374973CD4BB3DC41E3081346798"
			"497FF6E36CB9352281DFE07D07FC530C"
			"A9AD8EF7AAD56EF5D41BE83D5E543807"),
		hexStringToVector(
			"AE651EF50A20B0F496F104F56F845206"
			"ED544B28D0374CBB779146DFF2EA5894"
			"EB29301FE33872F9B299A79C0C0F28C4"),
		hexStringToVector(
			"A842918DFBBF3BFFCCC527B6DD2C0DF4"
			"EB3F100F0692727DA77DAF44A6548760"
			"13B37031C493AC18950003EEBD107A29"),
		hexStringToVector(
			"0F8BA7214DE0E3A9E13C282BFA09CEA7"
			"82C31C052F516D0AAA403D97716E0D08"
			"B1F7F9BB4085B555740C813C4ECE1B90"),
		hexStringToVector(
			"CAD2D28FBDCC3A5D71FB3ADCEEC52313"
			"AD41D4FF1F915CAA34EE127839DBF2E9"
			"A7B06E1C4ECD6255926C16C06E51EFD0"),
		hexStringToVector(
			"CB8F1CC9EB72465176B97B6226A87E69"
			"D77C65190114CCE1F830A3DFEFA5A8A2"
			"78D5CF594B173AC58C06EC74958FF8C6"),
		hexStringToVector(
			"87776D7022DC18592B578C534E2FCF57"
			"946E0F74C47DF85612F89C6593FD50A9"
			"E445C048D6CDA9A1D1D10EA3B3C973D0"),
	};

	const std::vector<std::vector<std::byte>> sha3_512Results
	{
		hexStringToVector(
			"A69F73CCA23A9AC5C8B567DC185A756E"
			"97C982164FE25859E0D1DCC1475C80A6"
			"15B2123AF1F5F94C11E3E9402C3AC558"
			"F500199D95B6D3E301758586281DCD26"),
		hexStringToVector(
			"3939FCC8B57B63612542DA31A834E5DC"
			"C36E2EE0F652AC72E02624FA2E5ADEEC"
			"C7DD6BB3580224B4D6138706FC6E8059"
			"7B528051230B00621CC2B22999EAA205"),
		hexStringToVector(
			"DEF4AB6CDA8839729A03E000846604B1"
			"7F03C5D5D7EC23C483670A13E11573C1"
			"E9347A63EC69A5ABB21305F9382ECDAA"
			"ABC6850F92840E86F88F4DABFCD93CC0"),
		hexStringToVector(
			"A3E168B0D6C143EE9E17EAE92930B97E"
			"6600356B73AEBB5D68005DD1D0749445"
			"1A37052F7B39FF030C1AE1D7EFC4E0C3"
			"667EB7A76C627EC14354C4F6A796E2C6"),
		hexStringToVector(
			"7575A1FB4FC9A8F9C0466BD5FCA496D1"
			"CB78696773A212A5F62D02D14E3259D1"
			"92A87EBA4407DD83893527331407B6DA"
			"DAAD920DBC46489B677493CE5F20B595"),
		hexStringToVector(
			"2E293765022D48996CE8EFF0BE54E87E"
			"FB94A14C72DE5ACD10D0EB5ECE029CAD"
			"FA3BA17A40B2FFA2163991B17786E51C"
			"ABA79E5E0FFD34CF085E2A098BE8BACB"),
		hexStringToVector(
			"A965E699C1FFAEE369B3651C3A318582"
			"AE329AE51E6CCFB5275F58F748CEDB8F"
			"6B8434FAC4A1135AD9B555AA8CC1FF99"
			"A2220CBE83BFC1C374FFC927BB00ABD3"),
		hexStringToVector(
			"4B44EC2D1848D0EC43AB0793390D2453"
			"5F3328AD23C5F8FC43F5579BD16D84BB"
			"A08B233B0B5E24E22BF6CA2DEFEACA16"
			"BB98F8CDEAF26EECF2FC94AFE4604CF4"),
	};

	const std::vector<std::vector<std::byte>> shake128Results
	{
		hexStringToVector(
			"7F9C2BA4E88F827D616045507605853E"
			"D73B8093F6EFBC88EB1A6EACFA66EF26"
			"3CB1EEA988004B93103CFB0AEEFD2A68"
			"6E01FA4A58E8A3639CA8A1E3F9AE57E2"
			"35B8CC873C23DC62B8D260169AFA2F75"
			"AB916A58D974918835D25E6A435085B2"
			"BADFD6DFAAC359A5EFBB7BCC4B59D538"
			"DF9A04302E10C8BC1CBF1A0B3A5120EA"
			"17CDA7CFAD765F5623474D368CCCA8AF"
			"0007CD9F5E4C849F167A580B14AABDEF"
			"AEE7EEF47CB0FCA9767BE1FDA69419DF"
			"B927E9DF07348B196691ABAEB580B32D"
			"EF58538B8D23F87732EA63B02B4FA0F4"
			"873360E2841928CD60DD4CEE8CC0D4C9"
			"22A96188D032675C8AC850933C7AFF15"
			"33B94C834ADBB69C6115BAD4692D8619"
			"F90B0CDF8A7B9C264029AC185B70B83F"
			"2801F2F4B3F70C593EA3AEEB613A7F1B"
			"1DE33FD75081F592305F2E4526EDC096"
			"31B10958F464D889F31BA010250FDA7F"
			"1368EC2967FC84EF2AE9AFF268E0B170"
			"0AFFC6820B523A3D917135F2DFF2EE06"
			"BFE72B3124721D4A26C04E53A75E30E7"
			"3A7A9C4A95D91C55D495E9F51DD0B5E9"
			"D83C6D5E8CE803AA62B8D654DB53D09B"
			"8DCFF273CDFEB573FAD8BCD45578BEC2"
			"E770D01EFDE86E721A3F7C6CCE275DAB"
			"E6E2143F1AF18DA7EFDDC4C7B70B5E34"
			"5DB93CC936BEA323491CCB38A388F546"
			"A9FF00DD4E1300B9B2153D2041D205B4"
			"43E41B45A653F2A5C4492C1ADD544512"
			"DDA2529833462B71A41A45BE97290B6F"),
		hexStringToVector(
			"4DD4B0004A7D9E613A0F488B4846F804"
			"015F0F8CCDBA5F7C16810BBC5A1C6FB2"
			"54EFC81969C5EB49E682BABAE02238A3"
			"1FD2708E418D7B754E21E4B75B65E7D3"
			"9B5B42D739066E7C63595DAF26C3A6A2"
			"F7001EE636C7CB2A6C69B1EC7314A21F"
			"F24833EAB61258327517B684928C7444"
			"380A6EACD60A6E9400DA37A61050E4CD"
			"1FBDD05DDE0901EA2F3F67567F7C9BF7"
			"AA53590F29C94CB4226E77C68E1600E4"
			"765BEA40B3644B4D1E93EDA6FB038037"
			"7C12D5BB9DF4728099E88B55D820C7F8"
			"27034D809E756831A334C078FC28ACB7"
			"6B5ADB3BFF6DD659CAA49CC34F726880"
			"F293BD3FC132027AE7602242064EFEC4"
			"D9D656E069D4DFAE0B40C1D6B6CDB21D"
			"89D00E168B0B74D72EBB3B672B57AF3E"
			"99C85DA2F41CE70672CD0E0521678FC5"
			"6EAB6314A0B3AF8B724376C01433D849"
			"43A73AF703D293634BC24322992756EE"
			"261FFF0D71BFFB8AEBF1026A6A345F2E"
			"AED505BC7E02498A3225FC91499DD5F5"
			"E30E386557C5FE0A88BC2337C80D7EA4"
			"2B60622960230577CE800CB63594F619"
			"B7DE31E026429B7648C5835AFC00559F"
			"A4C7695D6DD9F7B2537A265E9AF7A2C9"
			"86F8B60E7DC6EB3C4D805A6EEFB6FBB5"
			"BFDE21ED7E41CFDBEB02B0BAB76F9998"
			"BA1E52815A246B084EFAE7960AFFC2BA"
			"5C647E7CC05EF8120568432DFDE1D724"
			"6473304808985600A1AFC20B99185AF2"
			"5E89DC2EC6F4880DC79BAD50DFFCC9EA"),
		hexStringToVector(
			"812C14B78AEEE6820EA1CF8E0F3C61AE"
			"7CBD2AE493017ADE0756FBC575458309"
			"10DDC27F3183DF48C1E1D6D1A9F3DE22"
			"0F17402830AC73F77AD2977BDEF013C7"
			"39CA0E9EC11AC4FBEEF624F0FBBC534F"
			"0467F09E775BDBB8ACBCAC8B3DC6ECFA"
			"92F35EBD729A1BC90236F57AD32FFB46"
			"C055C93412D33CF612059C4D5BEDB6E4"
			"5807A7CE2E5029C0594CBFAECEC3F917"
			"8EB01D60ACB5A72D5DBABD6F95691A1F"
			"949E4DA7B48AA78C1BEE810B175218C5"
			"902753B88253FEF57681E60FDA1851A1"
			"8EC1F3953CDAA6B9C32D085C7EF9BEED"
			"9598354CEA388F3D8EEE372312168B59"
			"0ACD0C330816949211D8CEAEA737EB87"
			"BF9E6D4929D83B87E287C887E32B66FA"
			"F1540B64C53593BCE073AAE4BBF711FD"
			"C7AF6E7CB0FE938D2F87643FC4DAB4A7"
			"D4154015E82422C14600E44E41D005DB"
			"80CBB4C297335EE0E616E32D7E9BA5BB"
			"0D88FBB05B4D5799DF5462E4544D3883"
			"CC2C4850FBE5B43613841B0D515093D2"
			"46B714E96656E1F6227341E76051D5C9"
			"C52730D66D075DF0A9EDEED5D8E878A1"
			"FDE3AD2C962608CE17655AE769C484E6"
			"76904A29F22A3B4524DE2894AA633DF9"
			"F65CFFA329AF056E9BE4E67E7EBB786A"
			"C3541C00A792B4217E5EA2E51FBD979C"
			"C8C6E40F59B6A665F1BE6E6F2FF4D1D4"
			"8250BE44572FC5B731707B8611E8CD76"
			"79037D565BA7B066781437FADBB47F68"
			"AE752E879286A25020F8E00FD7E62AF6"),
		hexStringToVector(
			"CAFA188EBD8CDF392EB8E67776D6F574"
			"F72615ABBB5DA35999507460FB1D3579"
			"38F521BB18699510D353D3B42EF72E70"
			"4EE769C02A1EE7E366871F28B25F7987"
			"25CA3FD147F7DA2B49329FC5A00E486A"
			"19E9465B782B1176B84465A96F083957"
			"F3D55512F6CEF4AF5E891108B468326C"
			"1051EE1519C21051353F1EAA2AD39A32"
			"E5ADFD30026D4B56A2498309C27B03A1"
			"95FF5A7CA27E5184E322B9B783C44C4E"
			"0842F6695BD89D5648BE09B927990DC3"
			"980E7F818392380840E1C4310EA67ABF"
			"7285CFE20C50933A92E74FEF83AFA6B6"
			"CD6A372AAFF36DC582040B34E8521285"
			"EE9A67235D016CAFC9478B80D7B9778C"
			"AF5DA4E7D1865BDFB903DEDD7FB8477F"
			"007E60AF960BC04A81E77A74AD25641F"
			"DB9D81AEC87634D692E445807C0ACE09"
			"4F99DB07FFA01C2DA7517D12C830973D"
			"425839722EC0C5A2DF093F01EB9F5A6D"
			"2E075CAEA8C7AA69BC899463D0E55C81"
			"596907F1B0F81BAEAE734B24FAE3D999"
			"84D5E39EB4822C4ADEEA640228D72387"
			"656938CFE5DB953C1ED993FD9705CA9C"
			"9C70E6DF0075392F965682BC163BD859"
			"11C99511896BAFC35D9378B12E00628E"
			"EF3EA11E908F92498C90314C55698A6B"
			"9C6D8FD88AB4D7250166FE57E9C106FA"
			"674619C1D53CB3DE576806742FA538B5"
			"653BE7D0C08282A0159E7B4F3273C4CB"
			"E1735F3B07AA0004CD5C7F763983CDE5"
			"54AD9926FCFF1D1AC48B9777C7266C8D"),
		hexStringToVector(
			"7B35855B74D677AB6DBDBBBEED8F8BED"
			"3B08DF15055606A7E7FE9F5E319BC70B"
			"D9DF00A8571ABB6E6C202461EA00A2D7"
			"01DA5C3942975C48D78CE565689E3637"
			"9EA603FB1C6C53B508E0952B892A5ABA"
			"6660980A38FBF7C91D43BDAD1F3EB209"
			"10BEB91502404B21D3C5283A0A88403C"
			"6AA47D9DD0A04A23DCEFCD3527E4E961"
			"782A0E585AAE6BC9B7E6ACDBBBFF9CC7"
			"6F757887174CEE9CFA531C380467388F"
			"D2153BA8ACC2AF706F35667253216D3A"
			"1E623A747748FAD46AD65265E4530AB8"
			"4D39D9988EB876853E976156900D9DE4"
			"64CC2C57385F55242608C9E9C26B6768"
			"3293B1F83181C60BD77549C576F2BEB8"
			"E54B3EC5BE2FEAC8CD340CF104B0A49D"
			"9FB484B538296B31E30E55F7A8421E5E"
			"16B91869214D2F7F4DC68736E09FF298"
			"1518FF83F24D51E5F9D9300938600EA6"
			"C007C9C98A392B2E63216DC1F07EF4D6"
			"02F47C1F234B857D8650D23EDD344152"
			"EBB5DAA47BFF8E394931397AB2231DF1"
			"E22C566384112E8560E69EE422758E8A"
			"76E03D16770E5D417B6FB5C68D9CC93E"
			"16759987FE02BB8C99B8D368248A6893"
			"ADBEA888315D4AD251FC57FB1EABB2AB"
			"314B24ECD374F4566989038134788F34"
			"4453714F05A81CCAEBE92C75200FD8A0"
			"19E33A362722F222708C4F3894307D09"
			"A4B4D3666002A8EAF2D6CD19DB119A95"
			"7D2B66B0C788241CB7702DDECB63142A"
			"A7CA5B028327CB51D72904F2D819B707"),
		hexStringToVector(
			"5B31C72A95D9EA4AB6EBFB2B2501F14E"
			"C41223A010E123B68865DFB7061F8CC0"
			"0F69BE86E56A376A377E9544860F44B5"
			"43B48C8A56C6A25546AA7573C29DABA9"
			"B746A94EE82A33825047C019EEAD9E7A"
			"79D50362F649ACD1EF27DF8BDEAB0296"
			"5AA0C0CE67312433E0511B19A5D213EF"
			"9720E688A80CBDC7BA1C50032701676B"
			"D4AAB79675F85F76B7458F3E6D723C62"
			"802B1892F0C2B45138142AD9EF329D77"
			"1E6873BE098CB8C501C3732836EED916"
			"5B69AD40AE5A642D980C7BC843FA76B6"
			"05FB68872DE523C591CE09F21976AB47"
			"FF64F773B5D7EB54366BC003FD6F7574"
			"5C4B14EFBD1ACDFEC843955068120854"
			"3E469274A1FDDB16D4125A01E9107855"
			"149AEDDB7E21298DD8C309AB1C1BD506"
			"F2D377042F27FC275017B642456C93FC"
			"882E3CF44C1978307E7B9BBA16F612E2"
			"8E99D2E18D2D85DDAA235FE65EE40D90"
			"5A845768372DD621E6394AFA4C59378D"
			"B5FEEADEE6E342D004598779F08EB9A2"
			"31BA0CCDA0A1C7D19AC741505F0D931C"
			"73F241D1999EEDE40AA53A8A47F62993"
			"7D29D1A6D2AEF1807BE7C333DAA332B4"
			"C5551A7F37177F484740BE772EB03D04"
			"E82B2487AA65A2E4AD00F553060C6A95"
			"77D21A6C3B731D9D1659E54BF14CE4E4"
			"B7932250A8F3711FEB7D9997A5C554DB"
			"A364DD1F16AB4F34B37FCF5AFBA5B06B"
			"ED58E6ACD232D69963AAED993F51A1C4"
			"A2347D8119D381686AB0942190680CCA"),
		hexStringToVector(
			"C73D8FAAB5D0B4D660BD5082E44C3CAC"
			"97E61648BE0A04B116724E6F6B657684"
			"674B4B0E90D0AE96C0853EBD837BD824"
			"9ADBD3B60A1AD1FCF8A6AB8E2F5AA7FF"
			"197A3D7DBEDEFB433B613536AEC4D655"
			"B7BCD778526BE667847ACD2E0564D96C"
			"E5140C91357FADE000EFCB40457E1B6C"
			"ED41FA102E36E799792DB03E9A40C799"
			"BCA91262948E17605065FBF638FB40A1"
			"57B45CF7911A753D0D205DF84716A571"
			"12BEAB44F6201FF75AADE0BAFBA50474"
			"5CFE23E4E60E67E3993622AED73A1DD6"
			"A465BD453DD3C5BA7D2CDF3F1D39376A"
			"67C23E555F5ACF25BCE1E55F307252B9"
			"AAC2C0A39C885C7E44F204CB821C0D37"
			"A22DE3A71F3A1909B11B7181C42BE9B7"
			"8AA0D0A15444F330007554BCFCC0D8FD"
			"87D6431FB93C7CC38767A55D30D35455"
			"60BD380DB8C4C0EDA9399F68F8546442"
			"66C1B7958B270E75B79134AA01E7DCF1"
			"E6FDB6D9AE5D02CCE8CE8E480475E961"
			"7CC42A91C08D9AF6E5101B8AC5834ADB"
			"2C66987F42A580BB503A4B34A9F15ADC"
			"D0E23D0D4029479764831D06B5CAF3F1"
			"4B91449F15A291F4AC250B270B6CB3C3"
			"04725C99E32645E1FC02A0CDDD9E7179"
			"11F2342D9482F8E0979985A0170D725D"
			"AB4EA66D44F626BA475925FA39FC9DEE"
			"929C06D009416C0ADC1D987CD625A20A"
			"CBA4CC87F72F610867C3A7A928A3A037"
			"9676E8FE257107AB2F5C030BD2480E3D"
			"1863562E1FD0790280333ED9D5DD5A5C"),
		hexStringToVector(
			"4A05F2EF1AAD5FF4306429EC0F190440"
			"77FB64BFE1DCC50F74C3F045E9A9C3DE"
			"4A3B5963AEF771B049111B7B4640E20B"
			"1BA84ED7AFEE325571ACF347E311F33C"
			"1D421F21D663065C4DADDBD1785C5DAC"
			"0D554CEDB1A45A32E28145E98F49DEE2"
			"85B33DE14C336D10950ECC30966B79E8"
			"613FFEBB702FCC00A1C4250DD385ABB5"
			"37A284E9108D16B6F08F4E103F2C5E9E"
			"5C879CB5095534151E3C9A316D06DCE5"
			"3B7F01B424D375B564FE6839D1D1F00A"
			"2E62604060A9748BCDC8143737959FAB"
			"BCAE1851213E6DC28BEFDA48149DE6AA"
			"F4A60D4615BED67D11796F6173C3DCF1"
			"39037B31EEC9A8404DF07597BC266D3C"
			"7D9EB9A7CABF749FB44E40D746D0E9DF"
			"B5C8BBEB25E3F1612D03D3EB0C154DE4"
			"B2708C4F8A89762E171F744518AEC134"
			"A02EEAF49DB2E2C6C9914711288D6B0C"
			"E877861D9B10ACFCC19643738287DA00"
			"5282F3FC82F9F50AA681F2F55FE1809C"
			"9E23A3A59E51C2E894F718372F9FA156"
			"4B47AB3F43F0747A17839E933369B677"
			"8053E1764F52C5F319E33C8B25678F72"
			"332E33CCA97C68F19E058E70C31410DF"
			"4DE7E08169D6096B7B4EA48271EB684F"
			"EE9FC8B561C3FEE2DCE83D092B142BEC"
			"1478D26B48C3C6E597A7B2E44027E1EC"
			"A23178D3AFCC67BB530A529C7E1336E1"
			"ADAE74EF0BE9CD61E91C6AEA57F7CCB2"
			"3B64B2F84861CE159209FEF7A897A16A"
			"871AA99E63A5126DF2B03387E42C3D18"),
	};

	const std::vector<std::vector<std::byte>> shake256Results
	{
		hexStringToVector(
			"46B9DD2B0BA88D13233B3FEB743EEB24"
			"3FCD52EA62B81B82B50C27646ED5762F"
			"D75DC4DDD8C0F200CB05019D67B592F6"
			"FC821C49479AB48640292EACB3B7C4BE"
			"141E96616FB13957692CC7EDD0B45AE3"
			"DC07223C8E92937BEF84BC0EAB862853"
			"349EC75546F58FB7C2775C38462C5010"
			"D846C185C15111E595522A6BCD16CF86"
			"F3D122109E3B1FDD943B6AEC468A2D62"
			"1A7C06C6A957C62B54DAFC3BE87567D6"
			"77231395F6147293B68CEAB7A9E0C58D"
			"864E8EFDE4E1B9A46CBE854713672F5C"
			"AAAE314ED9083DAB4B099F8E300F01B8"
			"650F1F4B1D8FCF3F3CB53FB8E9EB2EA2"
			"03BDC970F50AE55428A91F7F53AC266B"
			"28419C3778A15FD248D339EDE785FB7F"
			"5A1AAA96D313EACC890936C173CDCD0F"
			"AB882C45755FEB3AED96D477FF96390B"
			"F9A66D1368B208E21F7C10D04A3DBD4E"
			"360633E5DB4B602601C14CEA737DB3DC"
			"F722632CC77851CBDDE2AAF0A33A07B3"
			"73445DF490CC8FC1E4160FF118378F11"
			"F0477DE055A81A9EDA57A4A2CFB0C839"
			"29D310912F729EC6CFA36C6AC6A75837"
			"143045D791CC85EFF5B21932F23861BC"
			"F23A52B5DA67EAF7BAAE0F5FB1369DB7"
			"8F3AC45F8C4AC5671D85735CDDDB09D2"
			"B1E34A1FC066FF4A162CB263D6541274"
			"AE2FCC865F618ABE27C124CD8B074CCD"
			"516301B91875824D09958F341EF274BD"
			"AB0BAE316339894304E35877B0C28A9B"
			"1FD166C796B9CC258A064A8F57E27F2A"),
		hexStringToVector(
			"DDBF55DBF65977E3E2A3674D33E479F7"
			"8163D592666BC576FEB5E4C404EA5E53"
			"29C3A416BE758687DE1A55E23D9E48A7"
			"D3F3CE6D8F0B2006A935800ECA9C9FC9"
			"03D86F065367221067658B4D7473ED54"
			"800D196FBE1089811DD9B47F21E3698B"
			"1573653ADAD231C39F145B586D6C0133"
			"378416138E4423F7AF7DACFFE965706A"
			"3C49024002B53BA05871E3F066694B16"
			"3630B0053BE41FA45D4317EAA8421425"
			"4038A37A9C83D62EB9EA6E6ACAFA6BBF"
			"E5AF9F389690D5A9E27BF97C1B93D93E"
			"CF36DF6DA212E12B2448154156E94687"
			"336B6DA91E368512B9F34C6161665429"
			"23F3618640D930F922A3DDDD2F879203"
			"78541446F2223F593931BD1BA02E2907"
			"CE3404621F26B900D05A1119A9E4934A"
			"7CD818DD9237445BF50475A011EA0078"
			"788801D21DFECB7A2BB294E4956DFA71"
			"D8CC472405342BF80120FE18A551D88D"
			"6ABC24D83F077BFB25EBDE5F4B03678D"
			"677EE646DCE3496D5138BE108782CA5A"
			"00AAFF3CB4BB873EC0F2E932DD748470"
			"33EC5F07254E3027B0AC12DB7D6D3F90"
			"B53D8A5BD63B99C3BF5CD38B453D7CB1"
			"2D0AE2BF1CFD3EE88AF71BB6606B0B79"
			"1DEFC2D762C8641BB8319FE17321EBA4"
			"07EB744699D92B35ABD79F5B9A85408C"
			"93D61233FECE638023875AA02B9EDBAC"
			"C84003A28CCA2D55A0742D635FDA8889"
			"05986CA01C1E6420D49EC25224D84E91"
			"5DFD1638A492282F1FD053770168953C"),
		hexStringToVector(
			"27BF218A01125514BB1B78E582AAD167"
			"20267373BB27FF96A594B7F10CC1D0A3"
			"93FA753F50437C89301542D27C12C03F"
			"53FF771CD0DF4B38F40B607B67CF4190"
			"20D34C18F5BD3BD424D39F47D118C84A"
			"53A635E17365F84FA0340BE3212056C1"
			"55FD227D3B52F9BE75538FC23287B5DE"
			"EC0E5737C8484ABBA0BE6CC43D956F17"
			"A41CF81DCE5E78326633CF09326E0004"
			"B172763089A593DFBBC1A0960A16F207"
			"F464F9EA2AFFE732208E970E00AA0BF1"
			"228634E98031155B61F6EE509648D4B0"
			"BF58FC9CDDD0B470B95A0AED8A3A96DE"
			"B2F7FCF65CE08A826300D4E48A681019"
			"C5A8EED66E7FD5FF098308138B4E1188"
			"6528AA9ED32617392B0F6E133A99683D"
			"ADDAC328838008BEFE9DC680720BF423"
			"1E88848660C8EF4A2973046D8E70D8EE"
			"8D8497AED8A748B3185A77B238B5650C"
			"99095D8702209C0C31FE1770042FE3BD"
			"C2582F5FB841EB5A234CB4C9B637FB4C"
			"5DD9F90225DB4C62DA420F3D1895FB2E"
			"B05E3A3D6767F73FDBC8B94D48A555CE"
			"4CDE5045BF5325B782E0C242FB3CD27D"
			"963A9EF014DDBA4B0608F2627FCABB2E"
			"DF570A49AD5377B1BC7193D9CCCC23F5"
			"D35C2DB59D05DF8D4A8E5146298B6EBE"
			"1DE25BA1089DC746EFEF6BCE22B43FB9"
			"9EEABDDAA76566452F544EAA85CE4559"
			"BA683A122CE76927242050FB236BDA09"
			"1480AB1B9ADCA148B639F986A3E936BB"
			"A565B54F727A0D45F369DF25B9AE8528"),
		hexStringToVector(
			"2FCE215362A523D7B76FB836EB458667"
			"099C58BC51D7EE6F6DEB9894B6A33757"
			"6B0DAF9A806488C3D238762B7A2E7B12"
			"AACD1D696517EED142AA5DC5A0747F08"
			"E5E39A2486D75F497CBD6C4899D6F5BF"
			"2AAAC9189A6ABC6E787B0D9C5283C840"
			"E518C6AB0393CF60337369251DF935A0"
			"2DE0463DBFA4DCDC1DE9034FC9C21FFB"
			"9DBD7C48384DFF31012BD5F5A9CDFDB7"
			"139C3C35F560913D643DDB728910413F"
			"1267BF1BF1586C5EE69DAD26B5315493"
			"4762D4C80C34D511BDD8A391F83D224F"
			"9F8F83B61DAA046C542BC78F153A3AED"
			"27E1268058F6952258D274F11C8D9634"
			"A5BDD4E69C60DCF1F89DF2238EADFE78"
			"3CBA652A554186D9E8307C7773722D10"
			"49C3815526F583612BBD8F6C587D058B"
			"80FBD38113957E60212777A9F67B6123"
			"12583FEFB67533C065286CF371001440"
			"B1A7A43DE2405E5E92D633F12A63EE2E"
			"BC408164545DF22803FF239DEE66EAA2"
			"0780D103D940880E8BF68B9D815EFCF1"
			"6F59E0D858AF33FE4D287A2B8E61C6EB"
			"F26E16E354B3EF63774EE01A14691B14"
			"9D81F010A655F308E966C990E1BEFCB6"
			"E4253FF43BF473AFA78AA88C36EBBE73"
			"5B6B2F92BA9D07A738E000C9B42BF8A3"
			"A4D8FB6C38AA36B3329F909676183FBB"
			"520196D0DEDC80DC6BA0DB4D72AC6544"
			"551CC38B23AFE000A91F10A89956D212"
			"0494543E3FF5D7D1B2791207860A0B92"
			"1DEBBAE769E55713A1D611F6B1175BD0"),
		hexStringToVector(
			"6C60955DCB8A663B6DC7F5EF7E069CA8"
			"FE3DA99A66DF6596925D557FED91F470"
			"91407D6FDE32023B57E2EE4C6AC97B07"
			"7624FAC25F6E13F4191696B40A4DF75F"
			"61CD5521D982C6D09D8342C17A366EC6"
			"346E3528B26CFF915BE9442B9EBCC30F"
			"F2F6ADD0E82BA904C73700CC99ACFF48"
			"0CAF0487CEE54CBA3753B6A5DD6F0DFE"
			"6571F0115E8737B071031023B6BB0D79"
			"864C3F33162E78269CEE23FCE47B91B4"
			"FDF91F98464A1D21E799D17F76C1BB80"
			"7DEE667B0B273054BE298299BD12B7A8"
			"0FB354CE3E6D1ACF98443879A554ECA6"
			"B96DF061D04A117C98AEEC1CDE1AFA9C"
			"EF62DD686DA91BB2B1F12379BBDC9FA3"
			"2A6B6998B77E8EB0B50507862AFA7799"
			"D018E272091F51CADD81ADB587EF67BA"
			"67618C45D1F3D559DBD299ABC26EC712"
			"DA8FA34BA33BFF400D1F0F8B6345CF57"
			"269B858578C0072A91A63EF85F9D3789"
			"00CD1A55D2BD4630DB829EB484D89CE7"
			"A414ACA173C52534AD5F9355E80E395E"
			"79156D751A930F7F8B5D9F4D5A2C9A75"
			"3723083C5E8EC6CB24D8EF93C8FEF2D1"
			"BE4ECA222C6E6C2ACFD684893CEA65CB"
			"F5B096B3D866007136126A33EF496BF2"
			"310F293BFA4C93AB826821E2B93259C4"
			"64E0AEB06D6DF8FFA30B1C1E7E384C7E"
			"427A2BA3D99FF8A666380C5C1B678F74"
			"2C57B0C3B08849FD65300DF13499DD89"
			"4EFC33116E7D0774064331FDD4074874"
			"17D13BBA4285299AF650D3065D951131"),
		hexStringToVector(
			"CC2EAA04EEF8479CDAE8566EB8FFA110"
			"0A407995BF999AE97EDE526681DC3490"
			"616F28442D20DA92124CE081588B8149"
			"1AEDF65CAAF0D27E82A4B0E1D1CAB238"
			"33328F1B8DA430C8A08766A86370FA84"
			"8A79B5998DB3CFFD057B96E1E2EE0EF2"
			"29ECA133C15548F9839902043730E44B"
			"C52C39FADC1DDEEAD95F9939F220CA30"
			"0661540DF7EDD9AF378A5D4A19B2B93E"
			"6C78F49C353343A0B5F119132B5312D0"
			"04831D01769A316D2F51BF64CCB20A21"
			"C2CF7AC8FB6F6E90706126BDAE0611DD"
			"13962E8B53D6EAE26C7B0D2551DAF624"
			"8E9D65817382B04D23392D108E4D3443"
			"DE5ADC7273C721A8F8320ECFE8177AC0"
			"67CA8A50169A6E73000EBCDC1E4EE633"
			"9FC867C3D7AEAB84146398D7BADE121D"
			"1989FA457335564E975770A3A00259CA"
			"08706108261AA2D34DE00F8CAC7D45D3"
			"5E5AA63EA69E1D1A2F7DAB3900D51E0B"
			"C65348A25554007039A52C3C309980D1"
			"7CAD20F1156310A39CD393760CFE58F6"
			"F8ADE42131288280A35E1DB8708183B9"
			"1CFAF5827E96B0F774C45093B417AFF9"
			"DD6417E59964A01BD2A612FFCFBA18A0"
			"F193DB297B9A6CC1D270D97AAE8F8A3A"
			"6B26695AB66431C202E139D63DD3A247"
			"78676CEFE3E21B02EC4E8F5CFD66587A"
			"12B44078FCD39EEE44BBEF4A949A63C0"
			"DFD58CF2FB2CD5F002E2B0219266CFC0"
			"31817486DE70B4285A8A70F3D38A61D3"
			"155D99AAF4C25390D73645AB3E8D80F0"),
		hexStringToVector(
			"1E67E9FBB0568660EBA48D1C701D7565"
			"3D97D9A94E770C355E2F3F6DD9B7C3CD"
			"C771FE82EC87BEFE4AAB21BA7C689FAC"
			"F51593CB278F7A8A4D81B9CE798CC2FB"
			"A50145EEB0DE079F016362FDE491620C"
			"B0A3C26CB5D5FB09980E783774C8FD2C"
			"9D8900EBB103D73F0BAB02D0A8E2827D"
			"2471DB29F3D6EE5D9D620D4D13D8925F"
			"1933B1C66869BF74EF967204238E0959"
			"27961ED5925D1A271B9277AB9DD7A30D"
			"E1FECD4C6BD9615618BF79850EE7E247"
			"121C928AC9BE6F81D2B41378E984F4BA"
			"494180D7E45CB7ABB6DE308DB53804BC"
			"F43DACC10AB3A98157285FBAC9B183AA"
			"49EC18E98E9B40D12B022F40B213641C"
			"B2E18E3303E4C9078DA836466DB8E2E8"
			"5962E5520E9FF66CF99F96E769921281"
			"6124313E5BA6347F99DA710994008141"
			"9B4EED3F4ED2763D655A00EC6D183CA8"
			"79074F237BBC49D40D598FF2BD8F47D0"
			"D69F2E41397042B4398D4FE449CF553F"
			"6096BA25C1A2185A13BCE5545FD0DEFE"
			"4D11168BD81B85CA5B0502233C43B6E8"
			"63447578EB6F074EE2EEFBBE6C52D0E8"
			"B1046F304DE2CAF6484AC24783DD7777"
			"4F0FAFEBAC731E429DBACB0D95BE662E"
			"D9C71FDD6C0E6595CA063C748ECFF992"
			"06441F8E96C96063EF61D741B4D622B6"
			"EF6A6D547B738AB27B50FAD2EC5C479E"
			"A8069B9D67654C2F12D8232AB8A97C83"
			"AF190B8F09E2B8F62B7DAA334DC8F26A"
			"3EA62A999433FBA70A27B9CF7FCB61A2"),
		hexStringToVector(
			"7204F8652F37D125BF692544B8BA0C88"
			"59BEAE66E4B04ADA5685C6B4C3C1B8A3"
			"825B2AD6BCB2F5443B4C28ADF57388FC"
			"FF481CA629934CABF872354E4A33942B"
			"738CCD4E1941621524E895188D2ACC9E"
			"FC69DE7A170BC974C430B9830E25DF96"
			"097B3785A2F6B86F39E59574E1D9C2B9"
			"1EED2231D4D1AEFBD5DCEE3E5FAA4247"
			"2949D0D19DA8980BFC6276E41DDD600D"
			"DF78E82393EEE5A9AE0C87578071D667"
			"B886EABBE6757A52AF9826F65E7CA805"
			"2982523F61184B5892465B3F82BAE68F"
			"E2FEC1577EB935309EDE804163DEE46E"
			"FBF5C93E7A9DC3BA79CD9A866966BA1F"
			"C0A721CA4AD17364C3A4033E805616FA"
			"A6075672DD6FAE31A67D891646B74DD8"
			"AA916E078BA7736A9B00F73DF90B0973"
			"2A42E38FE3EC9F8FC907A5868CA170C6"
			"69ABAF99571D14771B91F46C68F57DC6"
			"215B94DC0BB03F890BDE02DD41CE5D0F"
			"8F48E4FDAEAD1F0A05DA9A456DA80B82"
			"F44EFA53DB9899F42BA31CECD9D7CE6A"
			"5DE33B70DD6427D3A9B31C83ADEE1EE0"
			"73E06EC4238FEE4EA0029876FE6ECA5D"
			"E76E4D32B65564EFCAA326AF3519EDA4"
			"6EB3E443A85E78A8E26D21B158328A56"
			"AF40B07AD19734E341A45A5F43D1EC2C"
			"9EFFBC7C5DD92ACEF61607F3CFDA8BC7"
			"2D33C045A6B883972CF4FD1282A0ADE3"
			"978D1803EE78BC6F6FD297EC9E305246"
			"0483DBF79E6C35AFDBC10FA87D769AE6"
			"A4E2849AD112EDDEC1135CDEC2ECFB6C"),
	};

	testHash<keccak::sha3_244_hasher>("SHA3-224", tests, sha3_224Results);
	testHash<keccak::sha3_256_hasher>("SHA3-256", tests, sha3_256Results);
	testHash<keccak::sha3_384_hasher>("SHA3-384", tests, sha3_384Results);
	testHash<keccak::sha3_512_hasher>("SHA3-512", tests, sha3_512Results);
	testHash<keccak::shake128_hasher>("SHAKE-128", tests, shake128Results);
	testHash<keccak::shake256_hasher>("SHAKE-256", tests, shake256Results);

	std::cout << "Hash/Shake imlementation verified.\n";
}

template <typename F>
double benchmarkFunctionAndDisplayResults(
	std::string description,
	std::chrono::milliseconds timeLimit,
	std::uint64_t bytesPerIteration,
	F func)
{
	namespace cr = std::chrono;

	std::cout << description;

	cmemory_view noOptimizeTag;

	const auto start{ cr::high_resolution_clock::now() };

	auto now{ start };

	unsigned counter{};

	while (now - start < timeLimit)
	{
		noOptimizeTag = func();
		counter += 1;
		now = cr::high_resolution_clock::now();
	}

	const seconds_f64 elapsed{ now - start };
	const auto totalBytes{ bytesPerIteration * counter };
	const auto bandwidth{ totalBytes / elapsed.count() };
	const auto mibps{ bandwidth / 1024 / 1024 };

	std::cout
		<< std::round(mibps) << " MiB/s\t" << noOptimizeTag << std::endl;

	return bandwidth;
}

void benchmark()
{
	std::cout <<
		"Benchmarking...\n"
		"Name\t\tBandwidth\tNoOptTag\n";

	static constexpr std::chrono::milliseconds timeLimit{ 1000 };

	std::vector<std::byte> buf(2 * 1024 * 1024, std::byte{ 0x77 });

	benchmarkFunctionAndDisplayResults(
		"SHA3-256\t", timeLimit, buf.size(), [&] {
		keccak::sha3_256_hasher hasher(buf);
		hasher.finish({ buf.data(), hasher.hash_size });
		return cmemory_view{ buf.data(), 16 };
	});

	benchmarkFunctionAndDisplayResults(
		"SHA3-512\t", timeLimit, buf.size(), [&] {
		keccak::sha3_512_hasher hasher(buf);
		hasher.finish({ buf.data(), hasher.hash_size });
		return cmemory_view{ buf.data(), 16 };
	});

	benchmarkFunctionAndDisplayResults(
		"SHAKE-128\t", timeLimit, buf.size(), [&] {
		keccak::shake128_hasher hasher(buf);
		hasher.finish({ buf.data(), hasher.hash_size });
		return cmemory_view{ buf.data(), 16 };
	});

	benchmarkFunctionAndDisplayResults(
		"SHAKE-256\t", timeLimit, buf.size(), [&] {
		keccak::shake256_hasher hasher(buf);
		hasher.finish({ buf.data(), hasher.hash_size });
		return cmemory_view{ buf.data(), 16 };
	});

	std::cout << std::endl;
}

void hashStrings()
{
	std::string msg;

	while (std::cout << "<# " && std::getline(std::cin, msg))
	{
		const auto sha3_256Hash{
			keccak::sha3_256_hasher(data_as_bytes(msg)).finish()
		};
		const auto sha3_512Hash{
			keccak::sha3_512_hasher(data_as_bytes(msg)).finish()
		};
		const auto shake128Hash{
			keccak::shake128_hasher(data_as_bytes(msg)).finish()
		};
		const auto shake256Hash{
			keccak::shake256_hasher(data_as_bytes(msg)).finish()
		};

		std::cout
			<< "SHA3-256:  [" << sha3_256Hash << "]\n"
			<< "SHA3-512:  [" << sha3_512Hash << "]\n";

		std::cout
			<< "SHAKE-128: [" << shake128Hash << "]\n"
			<< "SHAKE-256: [" << shake256Hash << "]\n";
	}
}

void encryptStrings()
{
	namespace ke = keccak::experimental;

	std::cout << "Key: ";
	std::string key;
	std::getline(std::cin, key);

	ke::authenticated_encrypter_256 encrypt(data_as_bytes(key));
	ke::authenticated_decrypter_256 decrypt(data_as_bytes(key));

	std::string msg;

	while (std::cout << "<# " && std::getline(std::cin, msg))
	{
		std::vector<std::byte> buf(msg.size());
		std::vector<std::byte> etag(16);
		std::vector<std::byte> dtag(16);

		encrypt({}, buf, data_as_bytes(msg), etag);

		msg = std::string(msg.size(), char{});

		decrypt({}, data_as_bytes(msg), buf, dtag);

		std::cout
			<< "Encrypted:\t" << buf << '\n'
			<< "Decrypted:\t" << msg << '\n'
			<< "Enc. Tag:\t" << etag << '\n'
			<< "Dec. Tag:\t" << dtag << '\n';
	}
}

void generateRandomNumbers()
{
	namespace ke = keccak::experimental;

	std::cout << "Seed: ";
	std::string seed;
	std::getline(std::cin, seed);

	std::int64_t min{};
	std::int64_t max{};

	while (std::cout << "Min/Max: " && !(std::cin >> min >> max))
	{
		std::cin.clear();
		std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
	}

	std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

	ke::random_engine_256 rng(data_as_bytes(seed));

	std::uniform_int_distribution<decltype(min)> d(min, max);

	do {
		std::cout << d(rng);
	} while
		(std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'));
}

void testRandomNumberDistribution()
{
	namespace ke = keccak::experimental;

	std::cout << "Seed: ";
	std::string seed;
	std::getline(std::cin, seed);

	std::int64_t min{};
	std::int64_t max{};
	std::uint32_t iterations{};

	for (;;)
	{
		while (std::cout << "Min/Max/Iterations: "
			&& !(std::cin >> min >> max >> iterations))
		{
			std::cin.clear();
			std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
		}

		std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

		ke::random_engine_256 rng(data_as_bytes(seed));

		std::uniform_int_distribution<decltype(min)> d(min, max);

		std::map<decltype(min), decltype(iterations)> m;

		while (iterations--)
		{
			m[d(rng)] += 1;
		}

		for (auto i{ min }; i <= max; ++i)
		{
			std::cout << i << ": " << m[i] << '\n';
		}
	}
}
} // namespace

int main(int argc, char** argv) try
{
	testAllHashing();

	std::vector<std::string> args(argv, argv + argc);

	if (args.size() < 2 || args[1] == "-bench")
	{
		benchmark();
	}
	else if (args[1] == "-hash")
	{
		hashStrings();
	}
	else if (args[1] == "-encrypt")
	{
		encryptStrings();
	}
	else if (args[1] == "-genrandom")
	{
		generateRandomNumbers();
	}
	else if (args[1] == "-testrandom")
	{
		testRandomNumberDistribution();
	}
	else
	{
		std::cout <<
			"[-help]       Displays this message\n"
			"[-bench]      Benchmarks (default)\n"
			"[-hash]       Hashes strings\n"
			"[-encrypt]    Encrypts strings (experimental)\n"
			"[-genrandom]  Generates random numbers (experimental)\n"
			"[-testrandom] Tests random number distribution (experimental)\n";
	}
}
catch (std::exception& e)
{
	std::cerr << "Error: " << e.what() << '\n';
}
catch (...)
{
	std::cerr << "Unknown error occured.\n";
}
